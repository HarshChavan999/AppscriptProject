const CONFIG = {
  // Your Google Drive Folder ID for PDFs
  ADMISSIONS_PDF_FOLDER_ID: '1z9SkGw0JXQmlj_NjLcK7Cal1Vvgctcwr',

  // Sheet Names
  ADMISSIONS_SHEET_NAME: 'Admissions',
  INQUIRY_SHEET_NAME: 'DF', // Your main inquiry sheet
  STUDENT_DATA_SHEET_NAME: 'STUDENT DATA',
  FEES_SHEET_NAME: 'FEES',
  LOGIN_SHEET_NAME: 'LOGIN',
  DROPDOWN_SHEET_NAME: 'DROPDOWN',
  AUDIT_LOG_SHEET_NAME: 'AuditLog',
  RECEIPTS_SHEET_NAME: 'Receipts',

  DEFAULT_USER: 'Anonymous',
  ROLES: {
    ADMIN: 'admin'
  },

  // --- Column Mappings for INQUIRY_SHEET_NAME ('DF') ---
  // These indices (0-based) must match the column order in your 'DF' Google Sheet precisely,
  // assuming Column A is an auto-generated timestamp.
  //
  // Your sheet columns are effectively:
  // Col A: [Timestamp (Auto-generated by appendRow)]
  // Col B: Date (from form)
  // Col C: Aadhar
  // Col D: Full Name
  // Col E: Qualification
  // Col F: Phone Number
  // Col G: WhatsApp Number
  // Col H: Parents Number
  // Col I: Email Address
  // Col J: Age
  // Col K: Address
  // Col L: Interested Course
  // Col M: Inquiry Taken By
  // Col N: Branch
  // Col O: Follow-up Date
  // Col P: Notes
  // Col Q: Admission Status
  // Col R: Admission Date
  // Col S: Batch Assigned
  // Col T: Logged In User ID (if appended after form data)

  INQUIRY_COLUMN_INDEX: {
    // Note: Column A (Timestamp) is typically handled by `new Date()` at the very start of the `rowData` array
    // and doesn't need a specific CONFIG mapping unless you need to read it.
    DATE_FORM: 1,              // Maps to Sheet Column B (index 0 for the data array passed to appendRow)
    AADHAAR: 2,                // Maps to Sheet Column C (index 1 for the data array)
    FULL_NAME: 3,              // Maps to Sheet Column D (index 2 for the data array)
    QUALIFICATION: 4,          // Maps to Sheet Column E (index 3 for the data array)
    PHONE_NUMBER: 5,           // Maps to Sheet Column F (index 4 for the data array)
    WHATSAPP_NUMBER: 6,        // Maps to Sheet Column G (index 5 for the data array)
    PARENTS_NUMBER: 7,         // Maps to Sheet Column H (index 6 for the data array)
    EMAIL_ADDRESS: 8,          // Maps to Sheet Column I (index 7 for the data array)
    AGE: 9,                    // Maps to Sheet Column J (index 8 for the data array)
    ADDRESS: 10,                // Maps to Sheet Column K (index 9 for the data array)
    INTERESTED_COURSE: 11,     // Maps to Sheet Column L (index 10 for the data array)
    INQUIRY_TAKEN_BY: 12,      // Maps to Sheet Column M (index 11 for the data array)
    BRANCH: 13,                // Maps to Sheet Column N (index 12 for the data array)
    FOLLOW_UP_DATE: 14,        // Maps to Sheet Column O (index 13) - initially blank from form
    NOTES: 15,                 // Maps to Sheet Column P (index 14) - initially blank from form
    ADMISSION_STATUS: 16,      // Maps to Sheet Column Q (index 15) - initially blank from form
    ADMISSION_DATE: 17,        // Maps to Sheet Column R (index 16) - initially blank from form
    BATCH_ASSIGNED: 18,        // Maps to Sheet Column S (index 17) - initially blank from form
    LOGGED_IN_USER_ID: 19      // Maps to Sheet Column T (index 18) - if stored after Batch Assigned
  },

  // --- Column Mappings for Aadhaar Lookup ---
  // Assuming Aadhaar records for lookup are also in the 'DF' (INQUIRY_SHEET_NAME)
  // These should match the actual columns in your 'DF' sheet where the data resides.
  // The 'data' retrieved by `getValues()` from `getDataRange()` will include Column A (Timestamp),
  // so the indices here will be one higher than the `INQUIRY_COLUMN_INDEX` for the same visual column.
  //
  // For lookup, if Col A is Timestamp, Col B is Date, Col C is Aadhaar:
  AADHAAR_RECORDS_SHEET_NAME: 'DF', // Sheet name for lookup
  DATE_LOOKUP_COLUMN: 1,            // Actual Column B (index 1 in `getValues()` array)
  AADHAAR_LOOKUP_COLUMN: 2,         // Actual Column C (index 2 in `getValues()` array)
  FULL_NAME_LOOKUP_COLUMN: 3,       // Actual Column D (index 3 in `getValues()` array)
  QUALIFICATION_LOOKUP_COLUMN: 4,   // Actual Column E (index 4 in `getValues()` array)
  PHONE_NO_LOOKUP_COLUMN: 5,        // Actual Column F (index 5 in `getValues()` array)
  WHATSAPP_NO_LOOKUP_COLUMN: 6,     // Actual Column G (index 6 in `getValues()` array)
  PARENTS_NO_LOOKUP_COLUMN: 7,      // Actual Column H (index 7 in `getValues()` array)
  EMAIL_LOOKUP_COLUMN: 8,           // Actual Column I (index 8 in `getValues()` array)
  AGE_LOOKUP_COLUMN: 9,             // Actual Column J (index 9 in `getValues()` array)
  ADDRESS_LOOKUP_COLUMN: 10         // Actual Column K (index 10 in `getValues()` array)
};

// // Helper function for audit logging (make sure this is defined)
// function createAuditLogEntry(eventType, userId, details) {
//   const auditSheet = ss.getSheetByName(CONFIG.AUDIT_LOG_SHEET_NAME);
//   if (auditSheet) {
//     auditSheet.appendRow([new Date(), eventType, userId, JSON.stringify(details)]);
//   } else {
//     console.error(`Audit log sheet '${CONFIG.AUDIT_LOG_SHEET_NAME}' not found. Audit entry not logged.`);
//   }
// }